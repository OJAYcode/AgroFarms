@model IEnumerable<Farms.Models.CartItem>
@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="row mb-4">
    <div class="col-12">
        <h1><i class="fas fa-shopping-cart me-2"></i>Shopping Cart</h1>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a asp-action="Dashboard">Dashboard</a></li>
                <li class="breadcrumb-item active">Cart</li>
            </ol>
        </nav>
    </div>
</div>

@if (Model != null && Model.Any())
{
    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Cart Items (@Model.Count())</h5>
                </div>
                <div class="card-body p-0">
                    @foreach (var item in Model)
                    {
                        <div class="border-bottom p-3 cart-item" data-item-id="@item.Id">
                            <div class="row align-items-center">                                <div class="col-md-2">
                                    @if (item.Product != null && !string.IsNullOrEmpty(item.Product.ImageUrl))
                                    {
                                        <img src="@item.Product.ImageUrl" class="img-fluid rounded" alt="@item.Product.Name" style="height: 80px; width: 80px; object-fit: cover;">
                                    }
                                    else
                                    {
                                        <div class="bg-light rounded d-flex align-items-center justify-content-center" style="height: 80px; width: 80px;">
                                            <i class="fas fa-image text-muted"></i>
                                        </div>
                                    }
                                </div>                                <div class="col-md-4">
                                    <h6 class="mb-1">@(item.Product?.Name ?? "Unknown Product")</h6>
                                    <p class="text-muted small mb-1">@(item.Product?.Category ?? "Unknown")</p>
                                    @if (item.Product?.IsOrganic == true)
                                    {
                                        <span class="badge bg-success">Organic</span>
                                    }
                                </div>
                                <div class="col-md-2">
                                    <strong class="text-success">$@(item.Product?.Price.ToString("F2") ?? "0.00")</strong>
                                    <div class="small text-muted">per @(item.Product?.Unit ?? "unit")</div>
                                </div>
                                <div class="col-md-2">
                                    <div class="input-group input-group-sm">
                                        <button type="button" class="btn btn-outline-secondary" onclick="updateQuantity('@item.Id', @(item.Quantity - 1))">
                                            <i class="fas fa-minus"></i>
                                        </button>
                                        <input type="number" class="form-control text-center" value="@item.Quantity" min="1" max="@(item.Product?.StockQuantity ?? 99)" onchange="updateQuantity('@item.Id', this.value)">
                                        <button type="button" class="btn btn-outline-secondary" onclick="updateQuantity('@item.Id', @(item.Quantity + 1))">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </div>                                    <small class="text-muted">Max: @(item.Product?.StockQuantity ?? 99)</small>
                                </div>
                                <div class="col-md-1">
                                    <strong class="text-success item-total">$@((item.Quantity * (item.Product?.Price ?? 0)).ToString("F2"))</strong>
                                </div>
                                <div class="col-md-1">
                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeFromCart('@item.Id')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="mt-3">
                <a asp-action="Products" class="btn btn-outline-primary">
                    <i class="fas fa-arrow-left me-2"></i>Continue Shopping
                </a>
                <button type="button" class="btn btn-outline-danger ms-2" onclick="clearCart()">
                    <i class="fas fa-trash me-2"></i>Clear Cart
                </button>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Order Summary</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal:</span>
                        <strong id="subtotal">$@ViewBag.Subtotal</strong>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Shipping:</span>
                        <span class="text-success">Free</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Tax:</span>
                        <span id="tax">$@ViewBag.Tax</span>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between mb-3">
                        <h5>Total:</h5>
                        <h5 class="text-success" id="total">$@ViewBag.Total</h5>
                    </div>
                    
                    <a asp-action="Checkout" class="btn btn-success w-100 mb-2">
                        <i class="fas fa-credit-card me-2"></i>Proceed to Checkout
                    </a>
                    
                    <div class="text-center">
                        <small class="text-muted">
                            <i class="fas fa-shield-alt me-1"></i>
                            Secure checkout
                        </small>
                    </div>
                </div>
            </div>

            <!-- Delivery Information -->
            <div class="card mt-3">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-truck me-2"></i>Delivery Information</h6>
                </div>
                <div class="card-body">
                    <ul class="list-unstyled mb-0">
                        <li class="mb-2">
                            <i class="fas fa-check text-success me-2"></i>
                            Free delivery on all orders
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-clock text-info me-2"></i>
                            2-3 business days delivery
                        </li>
                        <li class="mb-2">
                            <i class="fas fa-leaf text-success me-2"></i>
                            Fresh from farm to your door
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="fas fa-shopping-cart fa-5x text-muted mb-3"></i>
        <h3>Your cart is empty</h3>
        <p class="text-muted">Start shopping for fresh agricultural products</p>
        <a asp-action="Products" class="btn btn-success">
            <i class="fas fa-shopping-bag me-2"></i>Start Shopping
        </a>
    </div>
}

@section Scripts {
    <script>
        function updateQuantity(itemId, newQuantity) {
            if (newQuantity < 1) {
                removeFromCart(itemId);
                return;
            }

            fetch('@Url.Action("UpdateCartQuantity", "Buyer")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    itemId: itemId,
                    quantity: parseInt(newQuantity)
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the item total
                    const cartItem = document.querySelector(`[data-item-id="${itemId}"]`);
                    const itemTotal = cartItem.querySelector('.item-total');
                    itemTotal.textContent = `$${data.itemTotal}`;
                    
                    // Update cart summary
                    updateCartSummary();
                    updateCartCount();
                } else {
                    showToast(data.message || 'Error updating quantity', 'error');
                    location.reload(); // Reload to show correct quantities
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating quantity', 'error');
            });
        }

        function removeFromCart(itemId) {
            if (confirm('Are you sure you want to remove this item from your cart?')) {
                fetch('@Url.Action("RemoveFromCart", "Buyer")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        itemId: itemId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove the item from display
                        const cartItem = document.querySelector(`[data-item-id="${itemId}"]`);
                        cartItem.remove();
                        
                        // Update cart summary
                        updateCartSummary();
                        updateCartCount();
                        
                        // Check if cart is empty
                        const remainingItems = document.querySelectorAll('.cart-item');
                        if (remainingItems.length === 0) {
                            location.reload(); // Reload to show empty cart message
                        }
                        
                        showToast('Item removed from cart', 'success');
                    } else {
                        showToast(data.message || 'Error removing item', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error removing item', 'error');
                });
            }
        }

        function clearCart() {
            if (confirm('Are you sure you want to clear your entire cart?')) {
                fetch('@Url.Action("ClearCart", "Buyer")', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        showToast('Error clearing cart', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error clearing cart', 'error');
                });
            }
        }

        function updateCartSummary() {
            fetch('@Url.Action("GetCartSummary", "Buyer")')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('subtotal').textContent = `$${data.subtotal}`;
                    document.getElementById('tax').textContent = `$${data.tax}`;
                    document.getElementById('total').textContent = `$${data.total}`;
                });
        }

        function updateCartCount() {
            fetch('@Url.Action("GetCartCount", "Buyer")')
                .then(response => response.json())
                .then(data => {
                    const cartBadge = document.querySelector('.cart-count');
                    if (cartBadge) {
                        cartBadge.textContent = data.count;
                        if (data.count > 0) {
                            cartBadge.style.display = 'inline';
                        } else {
                            cartBadge.style.display = 'none';
                        }
                    }
                });
        }

        function showToast(message, type) {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 250px;';
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }
    </script>
}
